class inParser {
    private: 
        ifstream fin;
        vector <char> str;
        int ptr;
        
        char getChar() {
            if( ptr == (int) str.size() ) {
                fin.read(str.data(), str.size());
                ptr = 0;
            }
            return str[ptr++];
        }

        template <class T>
        T getInt() {
            char ch;
            int number = 0;

            while( !isdigit( ch = getChar() ) );
            do
                number = number * 10 + ch - '0';
            while( isdigit( ch = getChar() ) );

            return number;
        }

    public:
        inParser(const char* name) : str(1e5), ptr(str.size()), fin(name) { }
        ~inParser() { fin.close(); }

        template <class T>
        friend inParser& operator >> (inParser &in, T &num) {
            num = in.getInt<T>();
            return in;
        }
};
